%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <iostream>
  #include <sstream>
  #include <fstream>
	#include "Register.hpp"
  #include "buffer.hpp"
	#include "SymbolTable.hpp"
	#include "StructTable.hpp"
  #include "attributes.hpp"
  #include "Function.hpp"
  
  extern char* yytext;
  extern int yylineno;

  extern 	FILE *yyin;
  extern 	int yylex();
  extern void yylex_destroy();
  extern int yyparse (void);
  //void yylex_destroy();
  //int yylex (void);
  void yyerror (const char*);
  void semanticError(string s);
  void Debug(string s);
  void assignStructs(int leftOffset, const list<Entry>& leftStruct , int rightOffset);
  
  SymbolTable symbol_table;
  StructTable struct_table;
  FunctionTable function_table;
  string curr_function;
  bool isMain;
  Buffer g_buff;
  int prev_offset = 0;
%}
/******************* rules *************************/




%token NUM ID  STRING
%token REAL_TOK 
%token INT_TOK 
%token WRITE_TOK READ_TOK WHILE_TOK DO_TOK IF_TOK
%token THEN_TOK ELSE_TOK MAIN_TOK VAR_TOK CALL_TOK RETURN_TOK DEFSTRUCT_TOK EXTERN_TOK
%token COM SC COL



%right ASSIGN_OP
%left OR_OP
%left AND_OP
%left REL_OP
%left ADD_OP
%left MUL_OP
%right NOT_OP
  
%right LP
%left RP
%right LC
%left RC
%right LS
%left RS

  
%%
/************************ C user routines **************************/
PROGRAM: TDEFS N FDEFS M MAIN_FUNCTION {
      //Debug
  Debug("PROGRAM: TDEFS FDEFS MAIN_FUNCTION" );
    //making the halt line and adding the header to the buffer 
	vector<string> implemented;
	vector<string> unimplemented;
	vector<string> header;
	
	
	
	if(isMain){
		//the current file that is parsed has the main 
		header.push_back("<main>");
		g_buff.backpatch($2.next_list,$4.address);
		g_buff.emit("HALT");
	}
	else{
		// empty
		header.push_back("<empty>");
		g_buff.backpatch($2.next_list,0);
	}
	//add the <header> as the last line
		header.push_back("<header>");
	
	unimplemented.push_back("<unimplemented>");
	implemented.push_back("<implemented>");
	bool firstFlag = true;
	for(map<string,Function>::iterator it = function_table.table.begin(); it != function_table.table.end(); ++it){
		if(it->second.implemented){
			
				implemented.push_back(" ");
				implemented.push_back(it->first);
					
				if(it->second.startLine > 0){
					implemented.push_back(",");
           implemented.push_back(to_string(it->second.startLine));	
         }
         else
					 semanticError("Not implemented");
		}
    
		else{
			//<unimplemented>
			if(!firstFlag){
			     unimplemented.push_back(",");
		   }
			firstFlag = false;
		  unimplemented.push_back(" ");
			unimplemented.push_back(it->first);
			vector<int>::iterator itVec = it->second.calledFrom.begin();
			while( itVec != it->second.calledFrom.end() ){
					  unimplemented.push_back(",");
						unimplemented.push_back(to_string(*itVec));
						++itVec;
			}
		}		
	}
	
	
	string unimplementedString;
	for(auto s : unimplemented){
			unimplementedString += s;
	}
	vector<string>:: iterator its = header.begin();
	header.insert(its,unimplementedString);
	
	string implementedString;
	for(auto s : implemented){
		implementedString += s;
	}
	vector<string>:: iterator itss = header.begin();
	header.insert(itss,implementedString);
	
	vector<string>:: iterator itsss = header.begin();
	header.insert(itsss,"</header>");
	
	for(auto line : header){
	  g_buff.insertHeader(line);
	} 
  
}
;
//      1     2            3    4        5  6  7    8
TDEFS: TDEFS M1 DEFSTRUCT_TOK LC DECLARLIST RC ID SC {
	// All fields of the struct are in the top of symbol table
	// Define a new struct type
	
    //Debug
  Debug("TDEFS: M1 TDEFS DEFSTRUCT_TOK LC DECLARLIST RC ID SC" );
	if(struct_table.getOffset($7.content) > 0){
		symbol_table.pop();
		semanticError("struct with such name already exists");
	}
	
	struct_table.push($7.content); //insert a new struct type
	map<string, SymbolEntry>  table = symbol_table.pop(); //pops all fields of the struct that were declared before
	
	for(map<string, SymbolEntry>::iterator it = table.begin(); it != table.end(); ++it){
		string name = it->first;
		SymbolEntry entry = it->second;
		if(entry.type == STRUCT){
			struct_table.insert($7.content, name, entry.size, entry.struct_type);
		}
		else{
			struct_table.insert($7.content, entry.type, name, entry.size);
		}
		
	}

 }		
 | /*epsilon*/
             
;	
//      1     2  3    4  5   6               7
FDEFS: FDEFS M1 TYPE ID LP FUNC_ARGLIST_FULL RP{
  
  // All fields of the function are in the top of symbol table
	// Define a new function 
  if(function_table.get($4.content)!= NULL) semanticError("function with such name already exists");
	
  Function f = Function($3.type, $4.content, true, g_buff.nextQuad());
  curr_function = $4.content;
	
	map<string, SymbolEntry>  table = symbol_table.pop();
  symbol_table.startFunction(-2-(table.size()));
  //f.offset=symbol_table.currentOffset();
  /*  for(map<string, SymbolEntry>::iterator it = (table.end()-1); it == table.begin(); --it){
        string name = it->first;
        SymbolEntry entry = it->second;
        if(entry.type == STRUCT){
          semanticError("wrong type of function parameter");
        }
        else{
          //cout<< entry.type << " " << it->first;
         if(!f.insert(entry.type, it->first)) semanticError("Err");
         if(!symbol_table.insert(it->first, entry.type, 1)) semanticError("Err");
        }
		
	}*/
  for(auto& it : $6.dclparam ){
      Type type = it.first;
      string name = it.second;
         if(type == STRUCT){
          semanticError("wrong type of function parameter");
        }
        else{
          //cout<< entry.type << " " << it->first;
         if(!f.insert(type, name)) semanticError("Err");
         if(!symbol_table.insert(name, type, 1)) semanticError("Err");
        }
  }
  
   function_table.push(f);
	
	//reset register bank!
	Register::reset();
  
}BLK {
  //Debug
  Debug("FDEFS: FDEFS TYPE ID LP FUNC_ARGLIST_FULL RP BLK");
  	//not found a return
	//buffer.emit("COPYI I2 I1");
  symbol_table.endFunctin();
	g_buff.emit("RETRN"); //goto IO
	//reset register bank!
	//Register::reset();
}

| FDEFS EXTERN_TOK TYPE ID LP FUNC_ARGLIST_FULL RP SC {

Debug("FDEFS EXTERN_TOK TYPE ID LP FUNC_ARGLIST_FULL RP SC" );
	    // All fields of the function are in the top of symbol table
	// Define a new function 
  if(function_table.get($4.content)!= NULL) semanticError("function with such name already exists");
	
  Function f = Function($3.type, $4.content, false, -1);
 
	
	map<string, SymbolEntry>  table = symbol_table.top();
  
    for(map<string, SymbolEntry>::iterator it = table.begin(); it != table.end(); ++it){
        string name = it->first;
        SymbolEntry entry = it->second;
        if(entry.type == STRUCT){
          semanticError("wrong type of function parameter");
        }
        else{
         if(!f.insert(entry.type, it->first)) semanticError("Err");
        }
		
	}
    curr_function = $4.content;
   function_table.push(f);
	
	//forget temporrary registers! reset register bank!
	//bank = RegistersBank();

}		
|
 /*epsilon*/
               
;

FUNC_ARGLIST_FULL: FUNC_ARGLIST {
  Debug("FUNC_ARGLIST_FULL: FUNC_ARGLIST" );
     $$.dclparam = $1.dclparam;         
}
  |
  /*epsilon*/
  
                      

;		

FUNC_ARGLIST:	FUNC_ARGLIST COM DCL {
               Debug("FUNC_ARGLIST COM DCL" );
  std::list<std::pair<Type,string>> tmp;
  tmp.merge($1.dclparam);
    tmp.merge($3.dclparam);

 // $1.dclparam.merge($3.dclparam);
  $$.dclparam = tmp;
	if($3.type == STRUCT){
      semanticError("undefined parameter type");
	}
	
 }
 | DCL {
   
    if($1.type == STRUCT){
      semanticError("undefined parameter type");
      $$.dclparam = $1.dclparam;
	  }
  }
;

MAIN_FUNCTION: MAIN_TOK {
  curr_function = "main";
  g_buff.emit("COPYI I0 0");
  g_buff.emit("COPYI I1 0");
  g_buff.emit("COPYI I2 0");
  
}BLK {
     Debug("MAIN_TOK BLK" );
     isMain = true;
} 
| {isMain = false;}
                                  /*epsilon*/ 
  ;		

BLK: DECLARATIONS LC LIST M RC {
     // end of scope
   Debug("BLK: DECLARATIONS LC LIST RC" );
   g_buff.backpatch($3.next_list , $4.address);
    map<string, SymbolEntry> table = symbol_table.pop();
    int sum = 0;
    for(map<string, SymbolEntry>::iterator it = table.begin(); it != table.end(); ++it){
        string name = it->first;
        SymbolEntry entry = it->second;
        sum += entry.size;
	}
  	//ostringstream os;
		//os << "SUBTI " << "I2 " << "I2 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"<< sum; //move frame
	//	g_buff.emit(os.str());
	  Register::reset();
  
 }
;	

DECLARATIONS: VAR_TOK DECLARLIST  
{ 
	/**
	* 	All variables of the current scope are in the symbol table.
	*	I1 must point to the stack frame and I2 will point to the top
	*	of the stack. 
	*/
  //Debug
  Debug("DECLARATIONS: VAR_TOK M1 DECLARLIST ");
 // cout << "current offset is" << " "<< symbol_table.currentOffset() << endl;
	
	ostringstream os;
	os << "ADD2I I2 I1 " << symbol_table.currentOffset();//-prev_offset;
  //cout << "current offset is" << " "<< symbol_table.currentOffset() << endl;

	g_buff.emit(os.str());		
 // $$.dclparam = $1.dclparam;
	 symbol_table.push();
}
                              |
                                /*epsilon*/
                           
;		

DECLARLIST: DECLARLIST DCL SC 
{  Debug("DECLARLIST: DECLARLIST DCL SC  ");
	//$$.dclparam = $1.dclparam.merge($2.dclparam);
}
| DCL SC
{  Debug(" DCL SC  ");
 // $$.dclparam = $1.dclparam;
}
;		

DCL: ID COL TYPE 
{
 
	$$.content = $1.content;
	$$.type = $3.type;
	$$.offset = 1;
	if(!symbol_table.insert($1.content, $3.type, 1)) semanticError("multiple deffinition of the variable in the scope");
        //Debug
      //ostringstream os1;
     // os1 << $$.content << " " << $$.type;
      Debug("DCL: ID COL TYPE ");
     // Debug(os1.str());
   $$.dclparam.push_back(std::make_pair($3.type,$1.content)); 
} 
    |
ID COL ID { 
 // struct_table.print();//debug
   Debug("ID COL ID ");
	int offset = struct_table.getOffset($3.content); //check if struct $3 exists
	if (offset == -1){
		semanticError("undefined struct");
	}
	$$.content = $1.content; //the name of a new var
	$$.type = STRUCT;
	$$.offset = offset;
  $$.struct_type = $3.content;
	if(!symbol_table.insertStruct($1.content, $3.content, offset)) semanticError("multiple deffinition of the variable in the scope");
	
} 
    |
	
ID COM DCL {
    
	$$.content = $1.content;
	$$.type = $3.type;
	$$.offset = $3.offset;
  $$.struct_type = $3.struct_type;
  if($$.type != STRUCT){
	  if(!symbol_table.insert($1.content, $3.type, 1)) 
      semanticError("multiple deffinition of the variable in the scope");
  }
  else{
    if(!symbol_table.insertStruct($1.content, $$.struct_type, $$.offset))
      semanticError("multiple deffinition of the variable in the scope");
  }
  //Debug
  //ostringstream os1;
 // os1 << $$.content << " " << $$.type;
  Debug("ID COM DCL ");
 // Debug(os1.str());
}
;	

 TYPE: INT_TOK {
    Debug("TYPE: INT_TOK ");
         $$.type = INT;
               }

    | REAL_TOK {
       Debug("TYPE: REAL_TOK ");
				 $$.type = REAL;
				}
;	

LIST: LIST M STMT {
   Debug("LIST: LIST M STMT ");
           $$.next_list = $3.next_list;
		   g_buff.backpatch($1.next_list, $2.address);
}
     |
      /*epsilon*/
                               
;	

STMT: 
                                ASSN { Debug("ASSN ");}
                              |
                                CNTRL {
                                  Debug("CNTRL ");
                              $$.next_list = $1.next_list;
                                }
                              |
                                READ {
                                Debug("READ ");}
                              |
                                WRITE {Debug("WRITE ");}
                              |
                                STMT_RETURN {Debug("STMT_RETURN");
                                }
                              |
                                BLK { Debug("BLK");}
;	

STMT_RETURN:	RETURN_TOK LP EXP RP SC {
    Debug("STMT_RETURN:	RETURN_TOK LP EXP RP SC");
      string type;
      if(curr_function == "main") semanticError("return in main");
      if($3.type != function_table.get(curr_function)->returnType) semanticError("unknown type return");
     // g_buff.emit ("COPYI I2 I1");
      type = ($3.type==INT) ? "I" : "R";
      g_buff.emit("STOR" + type + " " + $3.place + " I1 -1");
      g_buff.emit("RETRN");
      
      
  
}
;	

WRITE: WRITE_TOK LP EXP RP SC {
    Debug("WRITE: WRITE_TOK LP EXP RP SC ");
   if($3.type != INT && $3.type != REAL) {
      semanticError("unknown type for WRITE");
   }
	if ($3.type == INT) {
		g_buff.emit("PRNTI " + $3.place);
	}
	else {
		g_buff.emit("PRNTR " + $3.place);
	}		
   }
  |
    WRITE_TOK LP STRING RP SC {
      Debug(" WRITE_TOK LP STRING RP SC ");
		for(int i = 0; i < $3.content.length(); i++){
			char currSymbol = $3.content[i];
			if(currSymbol == '\\' && $3.content[i+1] == 'n'){ //new line
				currSymbol = '\n'; 
				i++;
			}
			if(currSymbol == '\\' && $3.content[i+1] == 't') {//tab
				currSymbol = '\t'; 
				i++;
			}
			g_buff.emit("PRNTC " + to_string((int)currSymbol));
		}
    }
;	

READ: READ_TOK LP LVAL RP SC {
   Debug(" READ: READ_TOK LP LVAL RP SC ");
   //symbol_table.print(); //debug
    
    if($3.type != INT && $3.type != REAL) {
      semanticError("unknown type for READ");
    }
  
		string emittedRead = ($3.type == INT)?"READI ":"READR ";
		string emittedStore = ($3.type == INT)?"STORI ":"STORR ";
		
		// allocate a temporary register and assign to it user input:
		string tempRegister = Register::getNewReg($3.type);
		g_buff.emit(emittedRead + tempRegister);
		
		// store the temporary register to memory:
		g_buff.emit(emittedStore + tempRegister + " " + $3.place + " 0");     
	}
;	

ASSN: LVAL ASSIGN_OP EXP SC {
 Debug(" ASSN: LVAL ASSIGN_OP EXP SC ");
  //struct_table.print();//debug
  //symbol_table.print(); //debug
  
  /**
  * If LVAL is a name of variable OR a struct field then:
  * $1.place: the adress in the stack for the value of the var
  * $1.offset: offset from I1
  * $1.struct_type: struct type in which $1 is a field
  *
  * If LVAL is a struct we need to assign all its fields
  *
  *
  */
  
  if($1.type != $3.type){
    semanticError("Different types while assigning");
  }
  
  if($1.type == REAL || $1.type == INT){
    
      ostringstream os;
      if($1.type == INT){
        os << "STORI ";
      }
      else {
        os << "STORR ";
      }
    
     os << $3.place << " " << $1.place << " 0";
		 g_buff.emit(os.str()); 
 
  }
  
  else{ //Assigning struct:
     if($1.struct_type != $3.struct_type){
        semanticError("Different struct types while assigning");
     }
    SymbolEntry lEntry = symbol_table.get($1.content);
    SymbolEntry rEntry = symbol_table.get($3.content);
    assignStructs(lEntry.offset, struct_table.get(lEntry.struct_type), rEntry.offset);
  }
  
  
}

;

LVAL: ID {
  Debug(" LVAL: ID ");
	SymbolEntry sEntry = symbol_table.get($1.content);
	 //check that a variable is declared
	if(sEntry.size < 0){
		semanticError("A variable is not declared");
	}
	
		$$.content = $1.content;
		$$.type = sEntry.type;
		$$.offset = sEntry.offset;
		$$.place = Register::getNewReg(INT);	
    $$.struct_type = sEntry.struct_type;
		
		ostringstream os;
		os << "ADD2I " << $$.place << " I1 " << $$.offset; //save the adress in the stack
		g_buff.emit(os.str());
}
  |
    STREF {
       Debug("STREF ");
      //In STREF we will allocate an address that saves its place in the stack
      if($1.type == STRUCT){
            $$ = $1;
      }
      
      else{
        $$.type = $1.type;
        $$.offset = $1.offset;
        $$.content = $1.content;
        $$.struct_type = $1.struct_type;
        $$.place = Register::getNewReg(INT);
        ostringstream os;
        os << "ADD2I " << $$.place << " I1 " << $$.offset; //save the adress in the stack
        g_buff.emit(os.str());
          
      }
     }
;
//       1     2     3      4   5     6       7 8  9
CNTRL: IF_TOK BEXP THEN_TOK M STMT  ELSE_TOK  N M STMT {
   Debug("CNTRL: IF_TOK BEXP THEN_TOK M STMT ELSE_TOK N M STMT ");
	g_buff.backpatch($2.true_list, $4.address);
	g_buff.backpatch($2.false_list, $8.address);
  list<int> tmp;
	tmp = merge($5.next_list, $7.next_list);
  	$$.next_list = merge(tmp, $9.next_list);
  
//	for (auto& field : $$.next_list) { //find a field with the name $3
   // cout<<  "fggggggggggggggggggggggggggggggggggggggggggggggggggggggggg"<< endl;
   // cout << field <<  endl;
 // }
			
 // $$.next_list = merge($5.next_list, $9.next_list);
}
      | IF_TOK BEXP THEN_TOK M STMT  {
         Debug("IF_TOK BEXP THEN_TOK M STMT ");
			g_buff.backpatch($2.true_list, $4.address);
			$$.next_list = merge($2.false_list, $5.next_list);
}
//           1    2   3    4    5   6
      | WHILE_TOK M BEXP DO_TOK M STMT {
        Debug("WHILE_TOK M BEXP DO_TOK M STMT  ");
			g_buff.backpatch($3.true_list,$5.address);
			g_buff.backpatch($6.next_list,$2.address);
			$$.next_list = $3.false_list;
			g_buff.emit("UJUMP " + to_string($2.address));
}
;	

BEXP: BEXP OR_OP M BEXP {
          Debug("BEXP: BEXP OR_OP M BEXP  ");

	g_buff.backpatch($1.false_list, $3.address);
	$$.false_list = $4.false_list;
	$$.true_list = merge($1.true_list, $4.true_list);
  }
	| BEXP AND_OP M BEXP {
              Debug(" BEXP AND_OP M BEXP ");

		g_buff.backpatch($1.true_list, $3.address);
		$$.false_list = merge($1.false_list, $4.false_list);
		$$.true_list = $4.true_list;
}

    | NOT_OP BEXP {
                    Debug(" NOT_OP BEXP ");

		$$.true_list = $2.false_list;
		$$.false_list = $2.true_list;
}
    | EXP REL_OP EXP {
      //Debug
      ostringstream os1;
      os1 << "$1: "<< $1.type << " $2: " << $3.type;
      Debug("EXP REL_OP EXP");
      Debug(os1.str());
     
		if($1.type != $3.type) {
			semanticError("different types in REL_OP");
		}
		else if($1.type == REAL || $1.type == INT){
			ostringstream compare, branch;
			if($2.content == "=="){
				compare << "SEQU";
				branch << "BREQZ ";
			}
			if($2.content == "<>"){
				compare << "SNEQ";
				branch << "BREQZ ";				
			}
			if($2.content == "<"){
				compare << "SLET";
				branch << "BREQZ ";				
			}
			if($2.content == "<="){
				compare << "SGRT";
				branch << "BNEQZ ";				
			}
			if($2.content == ">"){
				compare << "SGRT";
				branch << "BREQZ ";				
			}
			if($2.content == ">="){
				compare << "SLET";
				branch << "BNEQZ ";				
			}
			if($1.type == REAL){
				compare << "R ";
			}
			else{
				compare << "I ";
			}
			string reg = Register::getNewReg(INT);
			compare << reg <<  " " << $1.place << " " << $3.place;
			branch << reg << " ";
			
			g_buff.emit(compare.str());
			$$.false_list = makelist(g_buff.nextQuad());
			g_buff.emit(branch.str());
			$$.true_list = makelist(g_buff.nextQuad());
			g_buff.emit("UJUMP ");
			
			
		}
		else {
			semanticError("unknown types in REL_OP");
		}
}
    | LP BEXP RP {
                          Debug(" LP BEXP RP ");

		$$.true_list = $2.true_list;
		$$.false_list = $2.false_list;	
}
;	

EXP: EXP ADD_OP EXP 
	{		                          Debug(" EXP: EXP ADD_OP EXP  ");

		if(($1.type != $3.type) || $1.type == STRUCT || $3.type == STRUCT ){
			semanticError("type missmatch within add operation");
		}
		else{
			$$.type = $1.type;
			string T = ($$.type == INT)?"I":"R";
			$$.place = Register::getNewReg($$.type);
	
	
			if ($2.content == "+") {
				g_buff.emit("ADD2" + T + " " + $$.place + " " + $1.place + " " + $3.place);
			} 
			else { // "-"
				g_buff.emit("SUBT" + T + " " + $$.place + " " + $1.place + " " + $3.place);
			
			}	
		}
								
    }
   
   | EXP MUL_OP EXP 
	 {  Debug(" EXP MUL_OP EXP   ");

		if(($1.type != $3.type) || $1.type == STRUCT || $3.type == STRUCT){
			semanticError("type missmatch within mult operation");
		}
		else{
			$$.type = $1.type;
			string T = ($$.type == INT)?"I":"R";
			$$.place = Register::getNewReg($$.type);
	
	
			if ($2.content == "*") {
				g_buff.emit("MULT" + T + " " + $$.place + " " + $1.place + " " + $3.place);
			} 
			else { // "/"
				g_buff.emit("DIVD" + T + " " + $$.place + " " + $1.place + " " + $3.place);
			
			}	
		}
			
   }

   | LP EXP RP
    {  Debug(" LP EXP RP   ");
		$$ = $2;
    }

   | LP TYPE RP EXP 
	{ Debug("LP TYPE RP EXP   ");
			$$.type = $2.type;
			$$.place = Register::getNewReg($$.type);
			
			if($2.type == INT){
				g_buff.emit("CRTOI " + $$.place + $4.place);
			}
			
			else{//REAL
				g_buff.emit("CITOR " + $$.place + " " + $4.place);
			}
		
    }
   
   | ID {
       Debug("ID  ");
		 
		 SymbolEntry sEntry = symbol_table.get($1.content);
		 //check that a variable is declared
		if(sEntry.size < 0){
			semanticError("A variable is not declared");
		}
		
		
		$$.type = sEntry.type;
		$$.offset = sEntry.offset;
		$$.place = Register::getNewReg($$.type);
		$$.struct_type = sEntry.struct_type;
       
		ostringstream os;
		if($$.type == INT){
			os << "LOADI ";
      os << $$.place << " I1 " << $$.offset;
		  g_buff.emit(os.str());	
		}
		else if ($$.type == REAL){
			os << "LOADR ";
      os << $$.place << " I1 " << $$.offset;
	  	g_buff.emit(os.str());	
		}
		
	
		
    }

   |
     STREF {
         Debug("STREF  ");
		 /* 
		  * $1 is a field in the struct.
		  * If $1 is field in the struct:
		  *	$1.content: the name of the field
		  *	$1.offset:  the offset from I1!
		  * $1.type: INT or REAL or STRUCT
		  * $1 is not in the Symbol table (in symbol table we save only a declaration of 
		  * 									the variable of the struct type)
		  */
		  
      if($1.type != STRUCT){
			$$ = $1;
			$$.place = Register::getNewReg($$.type);
			ostringstream os;
			if($$.type == INT){
				os << "LOADI ";
			}
			else{
				os << "LOADR ";
			}
			
			os << $$.place << " I1 " << $$.offset;
			g_buff.emit(os.str());					
		  }   
		  else{ 
			  $$ = $1;
		  }
 }
   |
     NUM {
        Debug("NUM  ");
			$$.type = $1.type;
			$$.place = Register::getNewReg($$.type);
			if ($$.type == REAL) {
				g_buff.emit("COPYR " + $$.place + " " + $1.content);
			}
			else {
				g_buff.emit("COPYI " + $$.place + " " + $1.content);
			}
         }
   |
     CALL {
        Debug("CALL ");
        $$.type = $1.type;
				$$.place = $1.place;
			}
;	

STREF: ID LS ID RS {
   Debug("STREF: ID LS ID RS ");
		SymbolEntry sEntry = symbol_table.get($1.content); //get a variable from the symbol table
		 //check that a variable is declared
		if(sEntry.size < 0){
			semanticError("A variable is not declared");
		}
		if(sEntry.type != STRUCT){ //check if the variable is a struct
			semanticError("A variable is not a struct type");
		}
		
		//the variable is a struct. Get all fields that are defined for this struct 
		list<Entry> fields = struct_table.get(sEntry.struct_type); 
		bool found = false;
  //cout << $1.content << " " << $3.content << endl;
 // symbol_table.print();
		for (auto& field : fields){ //find a field with the name $3
      //cout << field.name << " " << $3.content << endl;
			if(field.name == $3.content){
				found = true;
				$$.content = field.name;
				$$.type = field.type;
				$$.struct_type = field.struct_type;
				$$.offset = sEntry.offset + field.offset;//offset of the field from I1
       /* ostringstream os;
        if($$.type == INT){
          os << "LOADI ";
          os << $$.place << " I1 " << $$.offset;
          g_buff.emit(os.str());
        }
        else if($$.type == REAL){
          os << "LOADR ";
          os << $$.place << " I1 " << $$.offset;
          g_buff.emit(os.str());
        }*/

         
			}
		}
		if(found == false){
			semanticError("a field is undefined in struct");
		}
		
		

}
 | STREF LS ID RS {
   Debug("STREF LS ID RS ");
	if($1.type != STRUCT){
		semanticError("not a struct");
	}
	
	//SymbolEntry sEntry = symbol_table.get($1.content); //get a variable from the symbol table
	list<Entry> fields = struct_table.get($1.struct_type);
	
	//the variable is a struct. Get all fields that are defined for this struct 
	//list<Entry> fields = struct_table.get(sEntry.struct_type); 
	bool found = false;
	for (auto& scope : fields){ //find a field with the name $3
		if(scope.name == $3.content){
			found = true;
			$$.content = scope.name;
			$$.type = scope.type;
			$$.offset = scope.offset + $1.offset;//offset of the field from I1
			$$.struct_type = scope.struct_type;
       /* ostringstream os;
        if($$.type == INT){
          os << "LOADI ";
          os << $$.place << " I1 " << $$.offset;
          g_buff.emit(os.str());
        }
        else if($$.type == REAL){
          os << "LOADR ";
          os << $$.place << " I1 " << $$.offset;
          g_buff.emit(os.str());
        }  */    
		}
	}
	if(found == false){
		semanticError("a field is undefined in struct");
	}		
	
}
;	

CALL: CALL_TOK ID LP CALL_ARGS_FULL RP {
   Debug("CALL: CALL_TOK ID LP CALL_ARGS_FULL RP ");
    Function* f = function_table.get($2.content);
    if(f == NULL) {
      semanticError("undefined function");
    }
    
    list<Param> parameters = f->parameters;
    list<Type> tmp1, tmp2;
	
	  for (auto& it : $4.parameters){
		  tmp1.push_back(it.first);
    }
    
    for (auto& it : f->parameters){
		  tmp2.push_back(it.type);
    }
    
    if(tmp1 != tmp2){
      semanticError("parameteres of function does not match");
    }
    
    //save used registers
    int cnt = 0;
    for(int i = 0; i != Register::intRegCnt ; ++i) {
      {
     // { if (i==2)
     // { cnt++;
     //   continue;
    //  }
        g_buff.emit("STORI I" + to_string(i) + " I2 " + to_string(cnt));
        ++cnt;
      }
    }
    for(int i = 0; i != Register::realRegCnt ; ++i) {
      
      g_buff.emit("STORR R" + to_string(i) + " I2 " + to_string(cnt));
      ++cnt;
    }
    
  
    for(auto i = $4.parameters.rbegin(); i!=$4.parameters.rend(); ++i){
      if(i->first == INT){
          g_buff.emit("STORI " + i->second + " I2 " + to_string(cnt));
          cnt++;
      }
      else{
          g_buff.emit("STORR " + i->second + " I2 " + to_string(cnt));
          cnt++;
      }
    }
    
   /* g_buff.emit("STORI I" + to_string(Register::intRegCnt-1) + " I2 " + to_string(cnt));
    cnt++;
    g_buff.emit("STORR R" + to_string(Register::realRegCnt-1) + " I2 " + to_string(cnt));
     cnt++;*/
  
  
  
  
  
  
    g_buff.emit("ADD2I I2 I2 " + to_string(cnt+1));
  
    g_buff.emit("COPYI I1 I2");
    
    f->calledFrom.push_back(g_buff.nextQuad());
     g_buff.emit("JLINK " + to_string(f->startLine));
  
    
    g_buff.emit("COPYI I2 I1");
  
   // Load the return value of the function
	string type = f->returnType == INT ? "I" : "R";
  string ret_reg =  Register::getNewReg(f->returnType );
  Register::decrement(f->returnType );
	g_buff.emit( "LOAD" + type + " " + ret_reg  + " I2 -1");
	$$.place = ret_reg; // Save the return register
	$$.type = f->returnType;
  
	// Restore I2
	g_buff.emit("SUBTI I2 I2 " + to_string(cnt + 1));
  
	// Restore all registers from stack
	cnt = 0;
	for (int i = 0; i < Register::intRegCnt ; i++, cnt++) {
		if (i == 2) continue; 
		g_buff.emit("LOADI I" + to_string(i) + " I2 " + to_string(cnt));
	}
	for (int i = 0; i < Register::realRegCnt; i++, cnt++) {
		string line = "LOADR R" + to_string(i) + " I2 " + to_string(cnt);
		g_buff.emit(line);
	}
 
  
}
;	

CALL_ARGS_FULL: CALL_ARGS {
                             Debug("CALL_ARGS_FULL: CALL_ARGS "); 
  $$.parameters == $1.parameters;
                          }
                        |
                          /*epsilon*/
         ;	

CALL_ARGS:  EXP {
              Debug("CALL_ARGS:  EXP "); 
        if($1.type != INT && $1.type != REAL){
         semanticError("unknown type of parameters");
        }
  	$$.parameters.clear();
    $$.parameters.push_back(std::make_pair($1.type,$1.place)); 
  
}
    | CALL_ARGS COM EXP {
      Debug("CALL_ARGS COM EXP "); 
      if($3.type != INT && $3.type != REAL){
        semanticError("unknown type of parameters");
      }
      $$.parameters = $1.parameters;
      $$.parameters.push_back(std::make_pair($3.type,$3.place)); 
}
;

/**************** Markers *****************/
M: {
Debug("M "); 
	$$.address = g_buff.nextQuad();
}

N: {
Debug("N"); 
	$$.next_list = makelist(g_buff.nextQuad());
//$$.next_list = g_buff.nextQuad();
	g_buff.emit("UJUMP ");
}


M1: {
Debug("M1 "); 
  symbol_table.push();
}
	
%%
  
void assignStructs(int leftOffset, const list<Entry>& leftStruct , int rightOffset){
  
  for (auto& field : leftStruct){
    
    switch(field.type){
        
      case INT:
        {
          ostringstream os, ol;
          string reg = Register::getNewReg(INT);
      
          ol << "LOADI " << reg << " I1 " << rightOffset + field.offset;
          os << "STORI " << reg << " I1 " << leftOffset + field.offset;

          g_buff.emit(ol.str());
          g_buff.emit(os.str());
          break;
    }
      case REAL:
        {
          ostringstream os, ol;
          string reg = Register::getNewReg(REAL);
      
          ol << "LOADR " << reg << " I1 " << rightOffset + field.offset;
          os << "STORR " << reg << " I1 " << leftOffset + field.offset;

          g_buff.emit(ol.str());
          g_buff.emit(os.str());
          break;     
    }
      default: //Struct
        {
      assignStructs(leftOffset + field.offset, struct_table.get(field.struct_type), rightOffset + field.offset);
    }
    }
    
  }
}
 
void Debug(string s){
 //cout << s << endl;
 // g_buff.emit(s);
}

void semanticError(string s) {
  cerr << "Semantic error: " << s.c_str()<< " in line number "<< yylineno <<endl;
  exit(3);
}

void yyerror (const char* str){
   cerr << "Syntax error: " << yytext << " in line number "<< yylineno;
   exit(2);
}

int main(int argc, char* argv[]) {
	string inputFile = argv[1];
	size_t lastindex;
	if (argc != 2) {
		cerr << "Operational error: invalid number of arguments" << endl;
		exit(9);
	}

	try {
		lastindex = inputFile.find_last_of(".");
		if (inputFile.substr(lastindex) != ".cmm") {
			throw std::invalid_argument("");
		}
	}
	catch (exception& e){
		cerr << "Operational error: invalid file type. expecting '.cmm' extension" << endl;
		exit(9);
	}

	string outFile = inputFile.substr(0, lastindex) + ".rsk";
	std::ofstream out(outFile);
	std::streambuf *coutBuffer = std::cout.rdbuf(); //save old buffer
	std::cout.rdbuf(out.rdbuf()); //redirect std::cout to outFile

	yyin = fopen(argv[1], "r");
  //cout << "ucbdjbciuds" << endl;
	yyparse();
	g_buff.print();

	cout.rdbuf(coutBuffer); //reset to standard output again
	fclose(yyin);

	yylex_destroy();
	return 0;
}
